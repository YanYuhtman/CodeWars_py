import unittest


is_check = lambda board: True
class MyTestCase(unittest.TestCase):
    is_check = lambda board: False

    def test_something(self):
        self.assertEqual(True, True)  # add assertion here
    def test_PawnCheck(self):
        self.assertEqual(is_check([[' ',' ',' ',' ',' ',' ',' ',' '],
                                   [' ',' ',' ',' ',' ',' ',' ',' '],
                                   [' ',' ',' ',' ',' ',' ',' ',' '],
                                   [' ',' ',' ',' ',' ',' ',' ',' '],
                                   [' ',' ',' ','♟',' ',' ',' ',' '],
                                   [' ',' ','♔',' ',' ',' ',' ',' '],
                                   [' ',' ',' ',' ',' ',' ',' ',' '],
                                   [' ',' ',' ',' ',' ',' ',' ',' ']]),
                         True,"Pawn check")

    def test_Pawn_no_check(self):
        self.assertEqual(is_check([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', '♟', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', '♔', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]),
                         False,"Pawn no check")

    def test_Bishop_check(self):
        self.assertEqual(is_check([[' ', ' ', ' ', ' ', ' ', ' ', ' ', '♝'],
                                    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                    [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                    ['♔', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]),
                          True,"Bishop check")

    def test_Rook_check(self):
        self.assertEqual(is_check([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', '♔', ' ', ' ', '♜', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]),
                         True,"Rook check")

    def test_Knight_check(self):
       self.assertEqual(is_check([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', '♔', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  ['♞', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]),
                        True,"Knight check")

    def test_Queen_check(self):
       self.assertEqual(is_check([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  ['♛', ' ', '♔', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]),
                        True,"Queen check")

    def test_None(self):
       self.assertEqual(is_check([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', '♔', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]),
                        False, "No check")

    def test_Multiple_no_check(self):
       self.assertEqual(is_check([['♛', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', '♞'],
                                  [' ', ' ', '♔', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                  [' ', ' ', ' ', '♛', ' ', ' ', ' ', '♞']]),
                        False,"Multiple no check")

    def test_Multiple_no_check2(self):
        self.assertEqual(is_check([['♛', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', '♞'],
                                   [' ', ' ', '♔', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', '♛', ' ', ' ', ' ', '♞']]),
                         False,"Multiple no check 2")

    def test_Multiple_no_check3(self):
        self.assertEqual(is_check([[' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   ['♔', ' ', ' ', ' ', ' ', ' ', ' ', '♞'],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' '],
                                   [' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ']]),
                         False,"Multiple no check 3")


if __name__ == '__main__':
    unittest.main()
